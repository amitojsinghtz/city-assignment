{"version":3,"sources":["components/Input/index.js","views/CityForm.js","views/City.js","views/CityList.js","components/StyledModal/index.js","components/Sidebar/index.js","views/CityDescription.js","App.js","index.js"],"names":["FormInput","props","name","type","inputType","placeholder","label","values","errors","handleChange","touched","handleBlur","style","classes","console","log","Form","Label","Control","onChange","onBlur","value","as","Text","className","FormSchema","Yup","shape","title","required","description","color","CityForm","cities","cityData","handleFormSubmit","handleFormClose","initialValues","validationSchema","onSubmit","setSubmitting","id","nanoid","submitCityHandler","formProps","handleSubmit","isSubmitting","Row","Col","md","Group","controlId","shrink","Button","variant","disabled","onClick","City","city","setCities","useState","setCityData","useEffect","cityList","dataIndex","findIndex","handleCityDataChange","data","field","e","target","splice","CityList","map","StyledModal","show","handleClose","children","Modal","onHide","Header","closeButton","Title","Body","Sidebar","setSelectedCity","selectedCity","borderLeft","background","href","slice","CityDescription","App","showFormView","setShowFormView","formViewMode","setFormViewMode","getLocalCities","saveLocalCities","localStorage","setItem","JSON","stringify","getItem","cityLocal","parse","handleHideFormView","getFormView","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a6d4dca.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nexport const FormInput = (props) => {\r\n  const {\r\n    name,\r\n    type = \"text\",\r\n    inputType,\r\n    placeholder,\r\n    label,\r\n    values,\r\n    errors,\r\n    handleChange,\r\n    touched,\r\n    handleBlur,\r\n    classes,\r\n    style,\r\n  } = props;\r\n\r\n  console.log(values)\r\n\r\n  return (\r\n    <>\r\n        <Form.Label>{label}</Form.Label>\r\n        <Form.Control\r\n          type={type}\r\n          placeholder={placeholder}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          value={values[name]}\r\n          as={inputType}\r\n          style={style}\r\n        />\r\n        {errors && touched[name] && errors[name] && (\r\n          <Form.Text className=\"text-muted\">\r\n            We'll never share your email with anyone else.\r\n          </Form.Text>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Form as BForm, Row, Col } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { FormInput } from \"../components/Input\";\nimport Button from \"react-bootstrap/Button\";\nimport { nanoid } from \"nanoid\";\n\nconst FormSchema = Yup.object().shape({\n  title: Yup.string().required(\"Title is required\"),\n  description: Yup.string().required(\"Description is required\"),\n  color: Yup.string().required(\"Color is required\"),\n});\n\nconst CityForm = (props) => {\n  const { cities, cityData, handleFormSubmit, handleFormClose } = props;\n  const initialValues = cityData || {\n    title: \"\",\n    description: \"\",\n    color: \"\",\n  };\n\n  const submitCityHandler = (values) => {\n    handleFormSubmit([\n      ...cities,\n      {\n        title: values.title,\n        description: values.description,\n        color: values.color,\n        id: nanoid(5),\n      },\n    ]);\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={FormSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          setSubmitting(true);\n          submitCityHandler(values);\n          handleFormClose();\n        }}\n      >\n        {(formProps) => {\n          const { handleSubmit, isSubmitting, values } = formProps;\n          return (\n            <BForm onSubmit={handleSubmit}>\n              <Row>\n                <Col md={6}>\n                  <BForm.Group controlId=\"title\">\n                    <FormInput\n                      shrink=\"true\"\n                      {...formProps}\n                      name=\"title\"\n                      label=\"Title\"\n                      placeholder=\"Paris, London, New York..\"\n                    />\n                  </BForm.Group>\n                </Col>\n                <Col md={6}>\n                  <BForm.Group controlId=\"color\">\n                    <FormInput\n                      shrink=\"true\"\n                      {...formProps}\n                      name=\"color\"\n                      label=\"Color\"\n                      placeholder=\"#c0ff00, #0eafc1, #b7b1e9 ..\"\n                    />\n                  </BForm.Group>\n                </Col>\n                <Col md={12} className=\"pt-3\"> \n                  <BForm.Group controlId=\"description\">\n                    <FormInput\n                      shrink=\"true\"\n                      {...formProps}\n                      name=\"description\"\n                      label=\"Description\"\n                      placeholder=\"type descrption here..\"\n                      inputType=\"textarea\"\n                    />\n                  </BForm.Group>\n                </Col>\n                <Col md={12} className=\"pt-4\">\n                  <Button\n                    variant=\"primary\"\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"mr-2\"\n                  >\n                    Save\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={handleFormClose}\n                    disabled={isSubmitting}\n                  >\n                    Close\n                  </Button>\n                </Col>\n              </Row>\n            </BForm>\n          );\n        }}\n      </Formik>\n    </>\n  );\n};\n\nexport default CityForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { BsFillTrashFill } from \"react-icons/bs\";\n\nconst City = ({ city, cities, setCities }) => {\n  const [cityData, setCityData] = useState({ ...city });\n\n  useEffect(() => {\n    const cityList = [...cities];\n    const dataIndex = cityList.findIndex((city) => city.id === cityData.id);\n    cityList[dataIndex] = cityData;\n    setCities(cityList);\n  }, [cityData]);\n\n  const handleCityDataChange = (data, field) => {\n    setCityData({ ...cityData, [field]: data });\n  };\n\n  const handleCityDataDelete = () => {\n    const cityList = [...cities];\n    const dataIndex = cityList.findIndex((city) => city.id === cityData.id);\n    cityList.splice(dataIndex, 1);\n    setCities(cityList);\n  };\n\n\n  return (\n    <>\n      <tr>\n        <td>{city.id}</td>\n        <td>\n          <Form.Control\n            type=\"text\"\n            onChange={(e) => handleCityDataChange(e.target.value, \"title\")}\n            value={cityData.title}\n          />\n        </td>\n        <td>\n          {\" \"}\n          <Form.Control\n            type=\"text\"\n            onChange={(e) => handleCityDataChange(e.target.value, \"color\")}\n            value={cityData.color}\n          />\n        </td>\n        <td>\n          <BsFillTrashFill onClick={handleCityDataDelete} />\n        </td>\n      </tr>\n    </>\n  );\n};\n\nexport default City;\n","import React from \"react\";\nimport City from \"./City\";\n\nconst CityList = ({ cities, setCities }) => {\n\n  return (\n    <>\n      <div className=\"city-container\">\n        <table className=\"city-list table tabel-striped\">\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Title</th>\n              <th>Color</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {cities &&\n              cities.map((city) => (\n                <City\n                  cities={cities}\n                  setCities={setCities}\n                  key={city.id}\n                  city={city}\n                />\n              ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n\nexport default CityList;\n","import { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst StyledModal = (props) => {\r\n  const {\r\n    show,\r\n    handleClose,\r\n    handleSubmit,\r\n    title,\r\n    children,\r\n  } = props;\r\n\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{children}</Modal.Body>\r\n\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StyledModal;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nconst Sidebar = (props) => {\r\n  const { cities, setSelectedCity, selectedCity } = props;\r\n  return (\r\n    <div className=\"profile-sidebar\">\r\n      <h5 className=\"p-2\">Sidebar</h5>\r\n      <div className=\"profile-usermenu\">\r\n        <ul className=\"nav\">\r\n          {cities &&\r\n            cities.map((city) => (\r\n              <li\r\n                style={{\r\n                  borderLeft: `4px solid ${city.color}`,\r\n                  background: selectedCity?.id === city.id ? city.color : \"#DED8D7\",\r\n                }}\r\n                onClick={() => setSelectedCity(city)}\r\n                key={city.id}\r\n              >\r\n                <a\r\n                  href=\"#\"\r\n                  style={{\r\n                    color: selectedCity?.id === city.id ?  \"#ffff\" : \"#000000\",\r\n                  }}\r\n                >\r\n                  <Row>\r\n                    <Col md={3}>{city.id}</Col>\r\n                    <Col md={9}>\r\n                      {city.title}\r\n                      <p>{`${city.description.slice(0, 30)}...`}</p>\r\n                    </Col>\r\n                  </Row>\r\n                </a>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nconst CityDescription = (props) => {\r\n  const { selectedCity, setSelectedCity, cities, setCities } = props;\r\n\r\n  useEffect(() => {\r\n    const cityList = [...cities];\r\n    const dataIndex = cityList.findIndex((city) => city.id === selectedCity.id);\r\n    cityList[dataIndex] = selectedCity;\r\n    setCities(cityList);\r\n    setSelectedCity(selectedCity)\r\n  }, [selectedCity]);\r\n\r\n  const handleCityDescriptionChange = (data) => {\r\n    setSelectedCity({ ...selectedCity, description: data });\r\n  };\r\n\r\n  return (\r\n    <Form.Control\r\n      type=\"text\"\r\n      onChange={(e) => handleCityDescriptionChange(e.target.value)}\r\n      value={selectedCity.description}\r\n      as=\"textarea\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default CityDescription;\r\n","import React, { useState, useEffect } from \"react\";\nimport Form from \"./views/CityForm\";\nimport CityList from \"./views/CityList\";\nimport StyledModal from \"./components/StyledModal\";\nimport CityForm from \"./views/CityForm\";\nimport \"./App.css\";\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\nimport Sidebar from \"./components/Sidebar\";\nimport CityDescription from \"./views/CityDescription\";\nfunction App() {\n  const [cities, setCities] = useState([]);\n\n  const [showFormView, setShowFormView] = useState(false);\n\n  const [formViewMode, setFormViewMode] = useState(false);\n\n  const [selectedCity, setSelectedCity] = useState(false);\n\n  useEffect(() => {\n    getLocalCities();\n  }, []);\n\n  useEffect(() => {\n    saveLocalCities();\n  }, [cities]);\n\n  const saveLocalCities = () => {\n    localStorage.setItem(\"cities\", JSON.stringify(cities));\n  };\n\n  const getLocalCities = () => {\n    if (localStorage.getItem(\"cities\") === null) {\n      localStorage.setItem(\"cities\", JSON.stringify([]));\n    } else {\n      const cityLocal = JSON.parse(localStorage.getItem(\"cities\"));\n      setCities(cityLocal);\n    }\n  };\n\n  const handleActiveFormView = (view) => {\n    setFormViewMode(view);\n    setShowFormView(true);\n  };\n\n  const handleHideFormView = () => {\n    setFormViewMode(\"undefined\");\n    setShowFormView(false);\n  };\n\n  const getFormView = () => {\n    switch (formViewMode) {\n      case \"Add\":\n        return (\n          <CityForm\n            handleFormSubmit={setCities}\n            handleFormClose={handleHideFormView}\n            cities={cities}\n          />\n        );\n      default:\n        setShowFormView(false);\n        return;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {showFormView && (\n        <StyledModal\n          show={showFormView}\n          handleClose={handleHideFormView}\n          title=\"Add City\"\n        >\n          {getFormView()}\n        </StyledModal>\n      )}\n      <Container>\n        <Row>\n          <Col md={4}>\n            <Sidebar cities={cities} setSelectedCity={setSelectedCity} selectedCity={selectedCity} />\n          </Col>\n          <Col md={8}>\n            <div className=\"main-content\">\n              <Row>\n                <Col md={12} className=\"text-right\">\n                  <Button\n                    className=\"m-3\"\n                    variant=\"primary\"\n                    onClick={() => handleActiveFormView(\"Add\")}\n                  >\n                    Add City\n                  </Button>\n                </Col>\n              </Row>\n              <CityList cities={cities} setCities={setCities} />\n              {selectedCity && (\n                <Row>\n                  <Col md={12}>\n                    <CityDescription\n                      selectedCity={selectedCity}\n                      cities={cities}\n                      setCities={setCities}\n                      setSelectedCity={setSelectedCity}\n                    />\n                  </Col>\n                </Row>\n              )}\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}